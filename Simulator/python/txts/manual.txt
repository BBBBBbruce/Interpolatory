======
Manual
======

- python3 main.py -h
Get this help.

- python3 main.py -il
List all supported interpolation modes

- python3 main.py -doc
List all supported interpolation modes and their CLI usage guide

- python3 main.py -mv <video-path>
Load a video and print metadata to stdout. If not supported, will return non-zero value

- python3 main.py -mi <video-path>
Load an image and print height, width, and colour dimensions to stdout. If not supported, will return non-zero value

- python3 main.py -i <input-video-path> -m <interpolation-mode>[:<settings>] -f <output-frame-rate> -o <output-file-path>
Get in an input video source from <input-video-path> and, using <interpolation-mode> mode, interpolate to <output-frame-rate> fps and save to <output-file-path>
Extra configuration settings can be set in <settings> using semicolon separated key-value pairs, e.g. for MEMCI, "block_size=32;filter_size=8;"
See interpolation mode usage guides in `python3 main.py -doc`

- python3 main.py -b <interpolation-mode>[:<settings>] [<output-folder>]
Run Middlebury benchmark to get results based on an <interpolation-mode>
If provided, outputs interpolated images to <output-folder>
Extra configuration settings can be set in <settings> using semicolon separated key-value pairs, e.g. for MEMCI, "block_size=32;filter_size=8;"
See interpolation mode usage guides in `python3 main.py -doc`

- python3 main.py -t <interpolation-mode>[:<settings>] -f <frame1> <frame2> -o <output-file-path> [<ground-truth-path>]
Using <interpolation mode, get the interpolated midpoint frame between <frame1> and <frame2>, saving the output to <output-file-path>
If [<ground-truth-path>] provided, metrics (PSNR & SSIM) are returned
Extra configuration settings can be set in <settings> using semicolon separated key-value pairs, e.g. for MEMCI, "block_size=32;filter_size=8;"
See interpolation mode usage guides in `python3 main.py -doc`

- python3 main.py -b [-d]
Run Middlebury benchmark to get results with previous setting. if previous setting is empty, using default setting:
MCI: Unidirectional
ME: tss
Block size: 8
target region: 3
filter: weighted
filter size: 5
Without -d, test will use the last-time settings. -d is always using default settings.

- python3 main.py -b <MCI_mode> <block_size> <target_region> <ME_mode> <filter.mode> <filter_size>
Run Middlebury benchmark by choosing modes and parameters
Valid options:
<MCI_mode> unidir bidir unidir2
<block_size> any int number
<target_region> any int number
<ME_mode> full tss HBMA
<filter.mode> mean median weighted
<filter_size> any int number
Note: Case sensitive

- python3 main.py -c <index_arg>
eg 0_Bidirectional,1_10 (for blocksize of 10)
Run Middlebury benchmark by choosing part of the parameters
Valid options:
0<MCI_mode> Unidirectional Bidirectional
1<block_size> any int number
2<target_region> any int number
3<ME_mode> full tss HBMA
4<filter.mode> mean median weighted
5<filter_size> any int number
Note: Case sensitive

- python3 main.py -clean
Clean test history

- python3 main.py -ver
Get version

- python3 main.py -dep
Check whether normal requirements are met

- python3 main.py -depcuda
Check whether CUDA dependencies are met
